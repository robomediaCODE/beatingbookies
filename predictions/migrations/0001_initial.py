# Generated by Django 4.2.5 on 2023-09-29 03:01

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('player', 'Player'), ('commissioner', 'Commissioner'), ('admin', 'Admin')], max_length=50)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SeasonDates',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('start_date', models.DateField()),
            ],
            options={
                'verbose_name_plural': 'Season Dates',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abbreviation', models.CharField(max_length=10)),
                ('name', models.CharField(max_length=100)),
                ('conference', models.CharField(max_length=50)),
                ('division', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='WeeklyMatchup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_number', models.PositiveIntegerField()),
                ('home_team_spread', models.FloatField()),
                ('away_team_spread', models.FloatField()),
                ('away_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='away_matches', to='predictions.team')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('home_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='home_matches', to='predictions.team')),
            ],
        ),
        migrations.CreateModel(
            name='WeeklyPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prediction', models.CharField(choices=[('Home', 'Home'), ('Away', 'Away')], max_length=5)),
                ('is_locked', models.BooleanField(default=False)),
                ('matchup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='predictions.weeklymatchup')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SideBet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proposing_user_prediction', models.CharField(choices=[('Home', 'Home'), ('Away', 'Away'), ('Over', 'Over'), ('Under', 'Under')], max_length=5)),
                ('accepting_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='accepted_bets', to=settings.AUTH_USER_MODEL)),
                ('proposing_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='proposed_bets', to=settings.AUTH_USER_MODEL)),
                ('related_matchup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='predictions.weeklymatchup')),
                ('related_team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='predictions.team')),
            ],
        ),
        migrations.CreateModel(
            name='SeasonOverUnderPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('spread', models.FloatField(default=0)),
                ('prediction', models.CharField(choices=[('Over', 'Over'), ('Under', 'Under')], max_length=5)),
                ('is_locked', models.BooleanField(default=False)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='predictions.team')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PostSeasonPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round', models.CharField(choices=[('Wildcard', 'Wildcard'), ('Divisional', 'Divisional'), ('Conference', 'Conference'), ('Super Bowl', 'Super Bowl')], max_length=20)),
                ('prediction', models.CharField(choices=[('Home', 'Home'), ('Away', 'Away')], max_length=5)),
                ('is_locked', models.BooleanField(default=False)),
                ('matchup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='predictions.weeklymatchup')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DivisionWinnerPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_locked', models.BooleanField(default=False)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='predictions.team')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
